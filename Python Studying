Python Studying

'string' A = 'He said "you can learn python"'
문자열안에 "를 포함시키기위해 '를 쓴다.

"string" A = "I'm python teacher"
문자열안에 '를 포함시키기위해 "를 쓴다.

'''srting''' A = '''From: "영진" 
                    To: "원봉쌤" 
                 '''
문자열안에 "를 포함하고 여러행의 문자열을 쓰기위함

"""string""" A = """Gmail: 'dldudwls991013@gmail.com'
                    Naver: 'jacob9910@naver.com'
                 """
문자열안에 '를 포함하고 여러행의 문자열을 쓰기위함

'''와 """는 여러문자열이 나올것으로 생각하므로 enter릃 눌러도 다른문자열을 기달림 그래서 끝을 맺을려면 '''아님 """이 나와야함

그러나, 이 방법은 복잡하므로 '와"중 자신이 편한것을 사용해도 무관하다. (일관성있게만 사용하면 no problem)




\n 개행(줄바꿈)
예)
  print('apple is\n very expensive')
  result: 
  apple is 
   very expensive

\t 탭
예)
  print('apple is\t very expensive')
  result:
  apple is      very expensive
  
\\ 문자 그대로의 \
예)
  print('apple is\\ very expensive')
  result:
  apple is\ very expensive

\' 문자 그대로의 '
예)
  print('\"apple\" is very expensive')
  result:
  "apple" is very expensive
  
\" 문자 그대로의 "
예) 
  print('\'apple\' is very expensive')
  result:
  'apple' is very expensive
  

문자열-연산

+ 문자열을 붙이는데 사용함
예) 
  a = 'pineapple'
  b = 'Korea'
  print(a +' '+  b)
  result:
  pineapple Korea
 
 * 문자열을 반복하는데 사용함
 예)
   a = '='
   print(a*6)
   result:
   ======
   
1.인덱싱 2.슬라이싱 
  
  a = 자바공부를하자 
      0 1 2 3 4 5 6
     
 1.문자열에서 특정 문자를 가르키는 것을 의미한다.
 인덱싱의 예제
 
 print(a[0]) -> 자 print(a[1]) -> 바 print(a[2]) -> 공 print(a[3]) -> 부
 
 2.문자열에서 특젇문자열을 가르키는 것을 의미한다.
 슬라이싱 예제
 
 print(a[0:2]) -> 자바 print(a[2:4]) -> 공부 print(a[5:7]) -> 하자 print([:4]) -> 자바공부 print(a[2:]) -> 공부를하자
 
함수란 무엇인가???
정해진 입력값에 특정한 동작을 수행하고 결과를 내는 기능이다
(내장함수: 파이썬이 기본적으로 제공하는 함수이다.)/(문자열 내장함수: 문자열 자료형이 기본적으로 제공하는 함수)


문자열-내장함수 종류들

a = '동해물과백두산이마르고닳도록하느님이보우하사'

count
문자열에 특정한 문자가 몇번 들어가있는지 세줌
예)
result = a.count('이')
result의 값은 2가나온다.

find*
문자열에서 특정문자의 위치를 찾아준다
예)
result = a.find('동')
result의 값은 0이나온다.

index* 
문자열에 특정 문자의 위치를 찾아준다
예)
result = a.index('동')
result의 값은 0이나온다

join*
문자 사이에 입력한 문자를 삽입한다
예)
a = '+'
result = a.join(['199','9'])
result의 값은 199+9가 나온다

a = ','
result = a.join('12345')
result의 값은 1,2,3,4,5가 나온다

*여기서 find와 index가 차이가 없다고 생각하지만 find를 이용해서 없는 문자를 찾으면, -1이 나오지만 index를 이용하면 error가 나온다.
차이는 find를 쓰면 특정 문자를 가지고 있는지 아닌지를 확실히 알아 앱에서 처리를 할수있지만, index는 error가 나오므로 이런 처리가 안된다

*join은 많은 문자열을 하나의 문자열로 만들어줄 수있는 역할을 한다
예)
a = ','
result = a.join(['0101011100','01000111001','0100101110100'])
result의 값은 0101011100,01000111001,0100101110100가 나온다

upper
문자를 대문자로 변환후 반환
a = 'Apple'
result = a.upper()
result의 값은 APPLE이 나온다

lower
문자를 소문자로 변환후 반환
a = 'Apple'
result = a.lower()
result의 값은 apple이 나온다
